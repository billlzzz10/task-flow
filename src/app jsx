import React, { useState } from "react"; import { Search, Bell, User, Menu, ChevronDown, Plus, CheckCircle, Clock, AlertTriangle, Folder, Calendar, Users, FileText, Activity, } from "lucide-react";

export default function App() { const [sidebarOpen, setSidebarOpen] = useState(true); const [searchQuery, setSearchQuery] = useState(""); const [selectedFolder, setSelectedFolder] = useState("inbox"); const [showUserMenu, setShowUserMenu] = useState(false); const [tasks, setTasks] = useState([ { id: "1", title: "Complete project proposal for client", description: "Prepare comprehensive proposal document with timeline and budget estimates", priority: "high", dueDate: "2024-06-15", assignedTo: "Sarah Johnson", status: "in-progress", tags: ["client", "urgent"], createdAt: "2024-06-10T09:30:00Z", }, { id: "2", title: "Review quarterly financial reports", description: "Analyze Q2 financial performance and prepare summary for executive team", priority: "medium", dueDate: "2024-06-20", assignedTo: "Michael Chen", status: "pending", tags: ["finance", "review"], createdAt: "2024-06-08T14:20:00Z", }, { id: "3", title: "Update website content", description: "Refresh homepage and product pages with latest information and images", priority: "low", dueDate: "2024-06-25", assignedTo: "Emma Rodriguez", status: "completed", tags: ["website", "content"], createdAt: "2024-06-05T11:15:00Z", }, { id: "4", title: "Schedule team meeting", description: "Coordinate availability for weekly team sync and send calendar invites", priority: "medium", dueDate: "2024-06-18", assignedTo: "Alex Taylor", status: "in-progress", tags: ["meeting", "team"], createdAt: "2024-06-07T16:45:00Z", }, { id: "5", title: "Research new marketing tools", description: "Evaluate 3 potential marketing automation platforms for implementation", priority: "high", dueDate: "2024-06-22", assignedTo: "Jordan Kim", status: "pending", tags: ["marketing", "research"], createdAt: "2024-06-09T10:00:00Z", }, ]);

const folders = [ { id: "inbox", name: "Inbox", icon: Folder, count: 3 }, { id: "today", name: "Today", icon: Clock, count: 2 }, { id: "upcoming", name: "Upcoming", icon: Calendar, count: 4 }, { id: "projects", name: "Projects", icon: FileText, count: 5 }, { id: "personal", name: "Personal", icon: Users, count: 1 }, ];

const projects = [ { id: "p1", name: "Website Redesign", color: "bg-blue-500" }, { id: "p2", name: "Mobile App Launch", color: "bg-green-500" }, { id: "p3", name: "Q3 Marketing Campaign", color: "bg-purple-500" }, { id: "p4", name: "Team Training Program", color: "bg-orange-500" }, ];

const filteredTasks = tasks.filter((task) => { const q = searchQuery.toLowerCase(); const matchesSearch = task.title.toLowerCase().includes(q) || task.description.toLowerCase().includes(q);

const today = new Date();
const due = new Date(task.dueDate);

const matchesFolder =
  selectedFolder === "inbox" ||
  (selectedFolder === "today" && due.toDateString() === today.toDateString()) ||
  (selectedFolder === "upcoming" && due > today) ||
  (selectedFolder === "projects" && task.tags.includes("project")) ||
  (selectedFolder === "personal" && task.tags.includes("personal"));

return matchesSearch && matchesFolder;

});

const toggleTaskStatus = (taskId) => { setTasks((prev) => prev.map((t) => t.id === taskId ? { ...t, status: t.status === "completed" ? "pending" : "completed" } : t ) ); };

const deleteTask = (taskId) => { setTasks((prev) => prev.filter((t) => t.id !== taskId)); };

const formatDate = (dateString) => { const date = new Date(dateString); return isNaN(date.getTime()) ? "â€”" : date.toLocaleDateString(); };

// Derived dashboard data (computed from current tasks state) const dashboardData = (() => { const total = tasks.length; const byStatus = { completed: tasks.filter((t) => t.status === "completed").length, pending: tasks.filter((t) => t.status === "pending").length, inProgress: tasks.filter((t) => t.status === "in-progress").length, }; const byPriority = { high: tasks.filter((t) => t.priority === "high").length, medium: tasks.filter((t) => t.priority === "medium").length, low: tasks.filter((t) => t.priority === "low").length, };

return {
  totalTasks: total,
  completedTasks: byStatus.completed,
  pendingTasks: byStatus.pending,
  inProgressTasks: byStatus.inProgress,
  highPriorityTasks: byPriority.high,
  mediumPriorityTasks: byPriority.medium,
  lowPriorityTasks: byPriority.low,
  tasksByProject: [
    { project: "Website Redesign", count: 2 },
    { project: "Mobile App Launch", count: 1 },
    { project: "Q3 Marketing Campaign", count: 1 },
    { project: "Team Training Program", count: 1 },
  ],
  tasksByStatus: [
    { status: "Completed", count: byStatus.completed },
    { status: "Pending", count: byStatus.pending },
    { status: "In Progress", count: byStatus.inProgress },
  ],
  tasksByPriority: [
    { priority: "High", count: byPriority.high },
    { priority: "Medium", count: byPriority.medium },
    { priority: "Low", count: byPriority.low },
  ],
};

})();

const maxProjectCount = Math.max( ...dashboardData.tasksByProject.map((p) => p.count) );

const maxStatusCount = Math.max( ...dashboardData.tasksByStatus.map((s) => s.count) );

const maxPriorityCount = Math.max( ...dashboardData.tasksByPriority.map((p) => p.count) );

return ( <div className="h-screen bg-gray-50 flex font-sans"> {/* Sidebar */} <div className={fixed inset-y-0 left-0 z-50 w-64 bg-white border-r border-gray-200 transition-transform duration-300 ${ sidebarOpen ? "translate-x-0" : "-translate-x-full" } md:translate-x-0} > <div className="flex items-center justify-between p-4 border-b border-gray-200"> <div className="flex items-center space-x-2"> <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center"> <FileText size={16} /> </div> <h1 className="text-xl font-bold text-gray-800">TaskFlow</h1> </div> <button onClick={() => setSidebarOpen(false)} className="md:hidden p-2 text-gray-500 hover:text-gray-700" aria-label="Close sidebar" > <Menu size={20} /> </button> </div>

<div className="p-4">
      <button className="w-full flex items-center space-x-3 px-4 py-3 bg-blue-50 text-blue-600 rounded-lg hover:bg-blue-100 transition-colors">
        <Plus size={20} />
        <span>New Task</span>
      </button>

      <div className="mt-6">
        <h2 className="text-sm font-semibold text-gray-500 uppercase tracking-wider mb-3">
          Folders
        </h2>
        <nav className="space-y-1">
          {folders.map((folder) => (
            <button
              key={folder.id}
              onClick={() => setSelectedFolder(folder.id)}
              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                selectedFolder === folder.id
                  ? "bg-blue-50 text-blue-600 border-l-4 border-blue-500"
                  : "text-gray-700 hover:bg-gray-100"
              }`}
            >
              <folder.icon size={18} />
              <span className="flex-1 text-left">{folder.name}</span>
              {folder.count > 0 && (
                <span className="bg-gray-200 text-gray-700 text-xs px-2 py-1 rounded-full">
                  {folder.count}
                </span>
              )}
            </button>
          ))}
        </nav>
      </div>

      <div className="mt-6">
        <h2 className="text-sm font-semibold text-gray-500 uppercase tracking-wider mb-3">
          Projects
        </h2>
        <div className="space-y-2">
          {projects.map((project) => (
            <div
              key={project.id}
              className="flex items-center space-x-3 px-4 py-2 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <div className={`w-3 h-3 rounded-full ${project.color}`}></div>
              <span className="text-sm text-gray-700">{project.name}</span>
            </div>
          ))}
        </div>
      </div>

      <div className="mt-6 pt-6 border-t border-gray-200">
        <div className="flex items-center space-x-3 px-4 py-3">
          <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
            <User size={16} />
          </div>
          <div className="flex-1">
            <div className="text-sm font-medium text-gray-800">Alex Chen</div>
            <div className="text-xs text-gray-500">alex.chen@example.com</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  {/* Main */}
  <div className="flex-1 flex flex-col overflow-hidden">
    {/* Header */}
    <header className="bg-white border-b border-gray-200 px-4 py-3 flex items-center justify-between">
      <div className="flex items-center space-x-4">
        <button
          onClick={() => setSidebarOpen(true)}
          className="md:hidden p-2 text-gray-500 hover:text-gray-700"
          aria-label="Open sidebar"
        >
          <Menu size={20} />
        </button>
        <div className="relative flex-1 max-w-md">
          <Search
            className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
            size={18}
          />
          <input
            type="text"
            placeholder="Search tasks, projects, or people..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
      </div>

      <div className="flex items-center space-x-4">
        <button className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors" aria-label="Notifications">
          <Bell size={20} />
        </button>
        <button className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors" aria-label="Help">
          <span className="sr-only">Help</span>
          ?
        </button>
        <div className="relative">
          <button
            onClick={() => setShowUserMenu((v) => !v)}
            className="flex items-center space-x-2 p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
            aria-haspopup="menu"
            aria-expanded={showUserMenu}
          >
            <User size={20} />
            <ChevronDown size={16} />
          </button>
          {showUserMenu && (
            <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
              <div className="px-4 py-2 border-b border-gray-200">
                <div className="text-sm font-medium text-gray-800">Alex Chen</div>
                <div className="text-xs text-gray-500">alex.chen@example.com</div>
              </div>
              <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                Profile Settings
              </button>
              <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                Account Settings
              </button>
              <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                Logout
              </button>
            </div>
          )}
        </div>
      </div>
    </header>

    {/* Content */}
    <main className="flex-1 overflow-y-auto p-4">
      {/* Dashboard */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-800 mb-6">Dashboard Overview</h2>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {/* Total Tasks */}
          <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-blue-100 rounded-full">
                <Activity size={24} className="text-blue-600" />
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500">Total Tasks</p>
                <p className="text-2xl font-bold text-gray-800">{dashboardData.totalTasks}</p>
              </div>
            </div>
            <div className="flex items-center justify-between text-sm text-gray-500">
              <div>Completed: {dashboardData.completedTasks}</div>
              <div>Pending: {dashboardData.pendingTasks}</div>
            </div>
          </div>

          {/* Completed */}
          <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-green-100 rounded-full">
                <CheckCircle size={24} className="text-green-600" />
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500">Completed</p>
                <p className="text-2xl font-bold text-gray-800">{dashboardData.completedTasks}</p>
              </div>
            </div>
            <div className="flex items-center justify-between text-sm">
              <div className="text-gray-500">Completion Rate</div>
              <div className="text-green-600 font-medium">
                {dashboardData.totalTasks
                  ? Math.round(
                      (dashboardData.completedTasks / dashboardData.totalTasks) * 100
                    )
                  : 0}
                %
              </div>
            </div>
          </div>

          {/* High Priority */}
          <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-red-100 rounded-full">
                <AlertTriangle size={24} className="text-red-600" />
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500">High Priority</p>
                <p className="text-2xl font-bold text-gray-800">{dashboardData.highPriorityTasks}</p>
              </div>
            </div>
            <div className="flex items-center justify-between text-sm">
              <div className="text-gray-500">Urgent Share</div>
              <div className="text-red-600 font-medium">
                {dashboardData.totalTasks
                  ? Math.round(
                      (dashboardData.highPriorityTasks / dashboardData.totalTasks) * 100
                    )
                  : 0}
                %
              </div>
            </div>
          </div>

          {/* In Progress */}
          <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-yellow-100 rounded-full">
                <Clock size={24} className="text-yellow-600" />
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500">In Progress</p>
                <p className="text-2xl font-bold text-gray-800">{dashboardData.inProgressTasks}</p>
              </div>
            </div>
            <div className="flex items-center justify-between text-sm">
              <div className="text-gray-500">Active Share</div>
              <div className="text-yellow-600 font-medium">
                {dashboardData.totalTasks
                  ? Math.round(
                      (dashboardData.inProgressTasks / dashboardData.totalTasks) * 100
                    )
                  : 0}
                %
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Analytics */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-800 mb-6">Analytics & Insights</h2>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Tasks by Project (bar) */}
          <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Tasks by Project</h3>
            <div className="space-y-4">
              {dashboardData.tasksByProject.map((item, idx) => (
                <div key={idx} className="flex items-center space-x-3">
                  <div className="w-40 text-sm text-gray-600 truncate">{item.project}</div>
                  <div className="flex-1 bg-gray-200 rounded-full h-6">
                    <div
                      className="bg-blue-500 h-6 rounded-full flex items-center justify-end pr-2 text-xs text-white"
                      style={{ width: `${(item.count / maxProjectCount) * 100}%` }}
                    >
                      {item.count}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Tasks by Status (bars) */}
          <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Tasks by Status</h3>
            <div className="space-y-4">
              {dashboardData.tasksByStatus.map((item, idx) => (
                <div key={idx} className="flex items-center space-x-3">
                  <div className="w-40 text-sm text-gray-600">{item.status}</div>
                  <div className="flex-1 bg-gray-200 rounded-full h-6">
                    <div
                      className="bg-indigo-500 h-6 rounded-full flex items-center justify-end pr-2 text-xs text-white"
                      style={{ width: `${maxStatusCount ? (item.count / maxStatusCount) * 100 : 0}%` }}
                    >
                      {item.count}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Tasks by Priority (bars) */}
          <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm lg:col-span-2">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Tasks by Priority</h3>
            <div className="space-y-4">
              {dashboardData.tasksByPriority.map((item, idx) => (
                <div key={idx} className="flex items-center space-x-3">
                  <div className="w-40 text-sm text-gray-600">{item.priority}</div>
                  <div className="flex-1 bg-gray-200 rounded-full h-6">
                    <div
                      className="bg-teal-500 h-6 rounded-full flex items-center justify-end pr-2 text-xs text-white"
                      style={{ width: `${maxPriorityCount ? (item.count / maxPriorityCount) * 100 : 0}%` }}
                    >
                      {item.count}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Task list */}
      <div>
        <h2 className="text-2xl font-bold text-gray-800 mb-4">Tasks</h2>
        <div className="bg-white rounded-xl border border-gray-200 overflow-hidden">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Title
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Assignee
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Priority
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className
